From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: TomTom <93038247+AverageGithub@users.noreply.github.com>
Date: Sat, 1 Apr 2023 10:33:51 +0200
Subject: [PATCH] Optimize canSee


diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 470bd9332572c3e1c9339ce691e2d86fc3ce8e08..9d66445ceb980caae2de9d8eb6772e4aca570caf 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -318,6 +318,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     public boolean isIteratingOverLevels = false; // Paper
 
     public gg.pufferfish.pufferfish.util.AsyncExecutor mobSpawnExecutor = new gg.pufferfish.pufferfish.util.AsyncExecutor("MobSpawning"); // Pufferfish - optimize mob spawning
+    public gg.pufferfish.pufferfish.util.AsyncExecutor canSeeExecutor = new gg.pufferfish.pufferfish.util.AsyncExecutor("CanSee"); // RivalsBW - optimize canSee
 
     public static <S extends MinecraftServer> S spin(Function<Thread, S> serverFactory) {
         AtomicReference<S> atomicreference = new AtomicReference();
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index 582467e3419c23446b20d3076fbfce22115250a8..c89394c167a38019094e639e7d97cf7c775778df 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -376,6 +376,7 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
             }
 
             if (gg.pufferfish.pufferfish.PufferfishConfig.enableAsyncMobSpawning) mobSpawnExecutor.start(); // Pufferfish
+            canSeeExecutor.start(); // RivalsBW
             org.purpurmc.purpur.task.BossBarTask.startAll(); // Purpur
             org.purpurmc.purpur.task.BeehiveTask.instance().register(); // Purpur
 
diff --git a/src/main/java/net/minecraft/server/level/ChunkMap.java b/src/main/java/net/minecraft/server/level/ChunkMap.java
index 57fdef8b16e1ed9a4693356144b4685bbcea285c..adeeeeded70afcd8a1e2ed7fa5f130fb2e468d20 100644
--- a/src/main/java/net/minecraft/server/level/ChunkMap.java
+++ b/src/main/java/net/minecraft/server/level/ChunkMap.java
@@ -9,6 +9,7 @@ import com.google.common.collect.Lists;
 import com.google.common.collect.Queues;
 import com.google.common.collect.Sets;
 import com.google.gson.JsonElement;
+import com.infernalsuite.aswm.api.SlimePlugin;
 import com.mojang.datafixers.DataFixer;
 import com.mojang.datafixers.util.Either;
 import com.mojang.logging.LogUtils;
@@ -111,6 +112,10 @@ import net.minecraft.world.level.storage.LevelStorageSource;
 import net.minecraft.world.phys.Vec3;
 import org.apache.commons.lang3.mutable.MutableBoolean;
 import org.apache.commons.lang3.mutable.MutableObject;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.scheduler.CraftScheduler;
+import org.bukkit.craftbukkit.scheduler.MinecraftInternalPlugin;
+import org.bukkit.plugin.Plugin;
 import org.slf4j.Logger;
 import org.bukkit.craftbukkit.generator.CustomChunkGenerator;
 import org.bukkit.entity.Player;
@@ -1615,21 +1620,30 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
                 double d0 = (double) Math.min(this.getEffectiveRange(), io.papermc.paper.chunk.PlayerChunkLoader.getSendViewDistance(player) * 16); // Paper - per player view distance
                 double d1 = vec3d_dx * vec3d_dx + vec3d_dz * vec3d_dz; // Paper
                 double d2 = d0 * d0;
-                boolean flag = d1 <= d2 && this.entity.broadcastToPlayer(player);
 
+
+                // RivalsBW start - Optimize canSee
                 // CraftBukkit start - respect vanish API
-                if (!player.getBukkitEntity().canSee(this.entity.getBukkitEntity())) {
-                    flag = false;
-                }
-                // CraftBukkit end
-                if (flag) {
-                    if (this.seenBy.add(player.connection)) {
-                        this.serverEntity.addPairing(player);
+                MinecraftServer.getServer().canSeeExecutor.submit(() -> {
+                    boolean flag = d1 <= d2 && this.entity.broadcastToPlayer(player);
+                    if (!player.getBukkitEntity().canSee(this.entity.getBukkitEntity())) {
+                        flag = false;
                     }
-                } else if (this.seenBy.remove(player.connection)) {
-                    this.serverEntity.removePairing(player);
-                }
 
+                    boolean finalFlag = flag;
+                    MinecraftServer.getServer().executeBlocking(() -> {
+                        if (finalFlag) {
+                            if (this.seenBy.add(player.connection)) {
+                                this.serverEntity.addPairing(player);
+                            }
+                        } else if (this.seenBy.remove(player.connection)) {
+                            this.serverEntity.removePairing(player);
+                        }
+                    });
+                });
+
+                // CraftBukkit end
+                // RivalsBW end - Optimize canSee
             }
         }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index f81b320ef330d03b68cf8b4af04b7c991ce9636b..f9d95e038fdd77af8fd7d72bc8695eea90160b02 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -1,6 +1,7 @@
 package org.bukkit.craftbukkit.entity;
 
 import com.destroystokyo.paper.Title;
+import com.destroystokyo.paper.util.misc.PooledLinkedHashSets;
 import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.io.BaseEncoding;
@@ -26,6 +27,8 @@ import java.util.Optional;
 import java.util.Set;
 import java.util.UUID;
 import java.util.WeakHashMap;
+import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.ConcurrentHashMap;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import javax.annotation.Nullable;
@@ -165,7 +168,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     private boolean hasPlayedBefore = false;
     private final ConversationTracker conversationTracker = new ConversationTracker();
     private final Set<String> channels = new HashSet<String>();
-    private final Map<UUID, Set<WeakReference<Plugin>>> invertedVisibilityEntities = new HashMap<>();
+    private final Map<Integer, Set<WeakReference<Plugin>>> invertedVisibilityEntities = new ConcurrentHashMap<>(); // RivalsBW
     private static final WeakHashMap<Plugin, WeakReference<Plugin>> pluginWeakReferences = new WeakHashMap<>();
     private int hash = 0;
     private double health = 20;
@@ -1796,7 +1799,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     private boolean addInvertedVisibility(@Nullable Plugin plugin, org.bukkit.entity.Entity entity) {
-        Set<WeakReference<Plugin>> invertedPlugins = this.invertedVisibilityEntities.get(entity.getUniqueId());
+        Set<WeakReference<Plugin>> invertedPlugins = this.invertedVisibilityEntities.get(entity.getEntityId()); // RivalsBW
         if (invertedPlugins != null) {
             // Some plugins are already inverting the entity. Just mark that this
             // plugin wants the entity inverted too and end.
@@ -1805,7 +1808,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         }
         invertedPlugins = new HashSet<>();
         invertedPlugins.add(CraftPlayer.getPluginWeakReference(plugin));
-        this.invertedVisibilityEntities.put(entity.getUniqueId(), invertedPlugins);
+        this.invertedVisibilityEntities.put(entity.getEntityId(), invertedPlugins); // RivalsBW
 
         return true;
     }
@@ -1841,7 +1844,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
             return;
         }
 
-        if (this.invertedVisibilityEntities.remove(entity.getUniqueId()) == null) {
+        if (this.invertedVisibilityEntities.remove(entity.getEntityId()) == null) { // RivalsBW
             this.untrackAndHideEntity(entity);
         }
     }
@@ -1883,7 +1886,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     private boolean removeInvertedVisiblity(@Nullable Plugin plugin, org.bukkit.entity.Entity entity) {
-        Set<WeakReference<Plugin>> invertedPlugins = this.invertedVisibilityEntities.get(entity.getUniqueId());
+        Set<WeakReference<Plugin>> invertedPlugins = this.invertedVisibilityEntities.get(entity.getEntityId()); // RivalsBW
         if (invertedPlugins == null) {
             return false; // Entity isn't inverted
         }
@@ -1891,7 +1894,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         if (!invertedPlugins.isEmpty()) {
             return false; // Some other plugins still want the entity inverted
         }
-        this.invertedVisibilityEntities.remove(entity.getUniqueId());
+        this.invertedVisibilityEntities.remove(entity.getEntityId()); // RivalsBW
 
         return true;
     }
@@ -1949,7 +1952,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
             return;
         }
 
-        if (this.invertedVisibilityEntities.remove(entity.getUniqueId()) == null) {
+        if (this.invertedVisibilityEntities.remove(entity.getEntityId()) == null) { // RivalsBW
             this.trackAndShowEntity(entity);
         }
     }
@@ -1979,7 +1982,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     // Paper end
 
     public void onEntityRemove(Entity entity) {
-        this.invertedVisibilityEntities.remove(entity.getUUID());
+        this.invertedVisibilityEntities.remove(entity.getBukkitEntity().getEntityId()); // RivalsBW
     }
 
     @Override
@@ -1989,7 +1992,8 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public boolean canSee(org.bukkit.entity.Entity entity) {
-        return this.equals(entity) || entity.isVisibleByDefault() ^ this.invertedVisibilityEntities.containsKey(entity.getUniqueId()); // SPIGOT-7312: Can always see self
+        if (this.equals(entity)) return true;
+        return !this.invertedVisibilityEntities.containsKey(entity.getEntityId()); // SPIGOT-7312: Can always see self // RivalsBW
     }
 
     public boolean canSee(UUID uuid) {
