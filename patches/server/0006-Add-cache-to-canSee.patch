From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: TomTom <93038247+AverageGithub@users.noreply.github.com>
Date: Wed, 5 Apr 2023 19:49:21 +0200
Subject: [PATCH] Add cache to canSee


diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index f81b320ef330d03b68cf8b4af04b7c991ce9636b..c42bec5191d658d59006fa53807e4258cdf9a739 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -2,6 +2,8 @@ package org.bukkit.craftbukkit.entity;
 
 import com.destroystokyo.paper.Title;
 import com.google.common.base.Preconditions;
+import com.google.common.cache.Cache;
+import com.google.common.cache.CacheBuilder;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.io.BaseEncoding;
 import com.mojang.authlib.GameProfile;
@@ -26,6 +28,7 @@ import java.util.Optional;
 import java.util.Set;
 import java.util.UUID;
 import java.util.WeakHashMap;
+import java.util.concurrent.TimeUnit;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import javax.annotation.Nullable;
@@ -179,6 +182,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     private static final boolean DISABLE_CHANNEL_LIMIT = System.getProperty("paper.disableChannelLimit") != null; // Paper - add a flag to disable the channel limit
     private long lastSaveTime;
     // Paper end
+    private Cache<org.bukkit.entity.Entity, Boolean> cache = CacheBuilder.newBuilder().expireAfterWrite(10, TimeUnit.SECONDS).build(); // RivalsBW
 
     public CraftPlayer(CraftServer server, ServerPlayer entity) {
         super(server, entity);
@@ -1989,7 +1993,16 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public boolean canSee(org.bukkit.entity.Entity entity) {
-        return this.equals(entity) || entity.isVisibleByDefault() ^ this.invertedVisibilityEntities.containsKey(entity.getUniqueId()); // SPIGOT-7312: Can always see self
+        // RivalsBW start
+        Boolean canSee = cache.getIfPresent(entity);
+
+        if (canSee == null) {
+            canSee = this.equals(entity) || !this.invertedVisibilityEntities.containsKey(entity.getUniqueId());
+            cache.put(entity, canSee);
+        }
+        // RivalsBW end
+
+        return canSee; // SPIGOT-7312: Can always see self // RivalsBW
     }
 
     public boolean canSee(UUID uuid) {
